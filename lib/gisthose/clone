#!/usr/bin/env bash
#
# Download _copies_ of all user's gists from GitHub API
#
# Derek Callaway <decal {AT} sdf {D0T} org>
#
# Thu Nov  3 10:43:36 EDT 2016
#

### [!] DONT EDIT ANYTHING BELOW HERE [!] ###

[ -d '../inc' ] && cd .. || ( [ -d '../../inc' ] && cd ../.. )

source etc/githose.conf
source inc/colors 
source inc/funcs

[ "$GITHOSE_MODE_UMASK" ] && umask -- $GITHOSE_MODE_UMASK 

if [ ! "$1" ]
  then echo
  echo "usage: $0 USER"
  echo '  USER  case-sensitive GitHub user name string'
  echo 
  echo "ex. $0 decal"
  echo

  exit 1
fi

( [ "$GITHOSE_DEBUG" ] && [ $GITHOSE_DEBUG -ne 0 ] ) && set -x || set +x

declare gistUser="$1"

function errx_show() {
  echo -n -- "$1: " 

  # errno -- $2 
}

function errx_exit() {
  readonly reposPath=$(realpath $3)

  echo -n -- "$1: " 

  [ "$reposPath" ] && echo -n "$reposPath "

  # errno -- $2 

  exit $2
}

function rmdir_exit() {
  readonly workdPath=$(pwd)

  if [[ $workdPath =~ $gistUser ]]
    then cd ..

    declare -i alis=$(ls -1 $gistUser)

    [ $alis -eq 0 ] && rmdir $gistUser
  fi

  exit $1
}

if [ ! -d $GIST_PATH_COPY ] 
  then mkdir -- "$(realpath $GIST_PATH_COPY)" 2>/dev/null

  [ $? -ne 0 ] && errx_show 'mkdir' "$?" $GIST_PATH_COPY
fi

chmod $GIST_MODE_DIRS $GIST_PATH_COPY |&> /dev/null

[ $? -ne 0 ] && errx_show 'chmod' "$?"

cd -- "${GIST_PATH_COPY}" > /dev/null

if [ ! -d "$gistUser" ]
  then mkdir -- "$gistUser"

  [ $? -ne 0 ] && errx_exit 'mkdir' "$?" "$gistUser"

  chmod $GIST_MODE_DIRS "$gistUser" |&> /dev/null

  [ $? -ne 0 ] && errx_show 'chmod' "$?"
fi

cd -- "$gistUser" > /dev/null
rm -f -- ./* 2 > /dev/null

declare -x usersGistsPath="${GIST_PATH_COPY}/${gistUser}"
declare -i waresDaWarez=0

while true
  do waresDaWarez+=1
  declare outputStr="$( curl -s "https://api.github.com/users/${gistUser}/gists" 2>&1 )"

  if [ ! "$outputStr" ] 
    then echo "${purplef}$0${whitef}${boldon}:${boldoff} ${yellowf}No output received from GitHub API!${reset}"

    rmdir_exit 2
  fi

  if [ "`echo "$outputStr" | grep 'ate limit'`" ]
    then echo "${purplef}$0${whitef}${boldon}:${boldoff} ${yellowf}GitHub API key's rate limit exceeded (${italicson}try again later${italicsoff})${reset}"

    rmdir_exit 3 
  fi

  if [[ ${#outputStr} -eq 4 ]]
    then echo "${purplef}$0${whitef}${boldon}:${boldoff} ${greenf}GitHub username ${invon}${gistUser}${invoff} doesn't have any ${italicon}publicized${italicoff} gists!${reset}"

    rmdir_exit 0
  fi

  declare -a gist_code_urls=$( echo "$outputStr" | grep '"raw_url": "' | grep "/${gistUser}/" | cut -d \" -f4 )

  [ $? -ne 0 ] && errx_show 'git' "$?"

  if [ ! "${gist_code_urls}" ]
    then echo "${purplef}$0${whitef}${boldon}:${boldoff} ${redf}Received output from GitHub API, but no raw gist URL's ${whitef}${boldon}?${reset}"
    echo "${purplef}$0${whitef}${boldon}:${boldoff} ${redf}Are you sure you entered the correct username ${whitef}${boldon}?${reset}"
    echo "${purplef}$0${whitef}${boldon}:${boldoff} ${redf}There must be gists at ${ulon}${cyanf}https://api.github.com/users/${gistUser}/gists${uloff} ${whitef}${boldon}!${reset}"

    rmdir_exit 4
  fi

  echo -e "${purplef}$0${whitef}${boldon}:${boldoff} ${blueb}Fetching Text of All Gists for${whitef}${boldon}:${reset} ${invon}${gistUser}${reset}\n"
  echo -ne "${greenf}${italicson}"
  
  for afile in ${gist_code_urls[*]}
    do echo -ne "${ulon}$(basename -- "$afile")${uloff} "
  done
  
  echo -e "${reset}" 

  declare -i acnt=0

  for one in ${gist_code_urls[*]}
    do declare bone="`basename -- $one`"

    [ $GITHOSE_DEBUG ] && echo -e "${reset}\n${whitef}GITHOSE_DEBUG${boldon}:${reset} ${inverse}${bone}${reset}\n"

    acnt+=1
      
    wget -nv -nd --restrict-file-names=ascii --retry-connrefused --timeout=${GIST_WGET_WAIT} -- "$one" > /dev/null 2>&1 & 
  done

  for two in `seq 1 $acnt`
    do wait %${two} > /dev/null 2>&1
  done

  break
done

find $usersGistsPath -type f -exec chmod $GIST_MODE_FILE {} \; 

echo -e "${reset}\n${purplef}$0${whitef}${boldon}:${boldoff} ${greenb}Finished Cloning All Gists From${whitef}${boldon}:${reset} ${invon}${gistUser}${reset}\a"

