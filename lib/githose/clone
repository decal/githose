#!/usr/bin/env bash
#
# Anononymously and asynchronously perform a GIT clone operation on all of a 
# GitHub user's public warez repositories in a parallelized fashion!
#
# Derek Callaway <decal {AT} sdf {D0T} org>
#
# Wed Oct 12 07:12:00 EDT 2016
#

[ $GITHOSE_DEBUG ] && set -x || set +x

[ -d '../inc' ] && cd .. || ( [ -d '../../inc' ] && cd ../.. )

source etc/githose.conf
source inc/inits
source inc/colors
source inc/funcs

### (o) DONUT ED IT ANYFING BLOW THIS (o) ###

[ "$GITHOSE_MODE_UMASK" ] && umask -- $GITHOSE_MODE_UMASK

declare -i singleRepo=0
declare -i successVal=0

if [ ! $1 ]
  then 
  echo "${yellowf}usage${whitef}${boldon}:${boldoff} ${purplef}$0${reset} ${cyanf}${italicson}USER${reset}"
  echo -e "  ${cyanf}USER  ${invon}case-sensitive string for GitHub user name${reset}\n"
  echo "${bluef}ex. ${purplef}$0${reset} ${bluef}decal${reset}"

  exit 1
fi

declare gitUser="$1"

if [[ $gitUser =~ ^(http|git)[s]:[/]+ ]]
  then if ( [[ $gitUser =~ .git$ ]] || [[ $gitUser =~ ^(http|git)[s]:[/]+[^/]+/[^/]+/[^/]+ ]] ) 
    then singleRepo=1
  else
    gitUser=$(echo $gitUser | awk 'BEGIN { FS="/" } { print $4 }')
  fi
fi

function errx_show() {
  which perror 2>/dev/null

  if [ $? -ne 0 ]
    then echo -n "${yellowb}$1${whitef}${boldon}:${boldoff}${reset}${yellowb} " 

    perror -s -- $2

    echo "$reset"
  fi

  return 0
}

function errx_exit() {
  which perror 2>/dev/null

  if [ $? -ne 0 ]
    then readonly reposPath=$(realpath $3)

    echo -n "${redb}$1${whitef}${boldon}:${boldoff}${reset}${redb} " 

    [ "$reposPath" ] && echo -n "$reposPath "

    perror -v -- $2

    echo -n "$reset"
  fi

  exit -- $2
}

if [ $singleRepo -ne 0 ]
  then cd -- $GITAA_PATH_REPOS

  echo -ne "${purplef}$0${whitef}${boldon}:${boldoff} ${cyanf}Handling URI Style Input as Single Git Repository${whitef}${boldon}:${boldoff} ${reset}${invon}${gitUser}${reset}\n${whitef}${italicson}" 

  git clone $gitUser > /dev/null 2>&1

  if [ $? ]
    then declare -i -r errCode=$? 
    
    echo -e "\a\n${reset}"

    exit -- $errCode
  else
    echo -e "\a\n${reset}${purplef}$0${whitef}${boldon}:${boldoff} ${greenb}Done Cloning Given Git Repository${whitef}${boldon}:${boldoff}${reset} ${invon}${gitUser}${reset}"

    exit 0
  fi
else
  echo -e "${purplef}$0${whitef}${boldon}:${boldoff} ${bluef}Fetching All GitHub Repositories for${whitef}${boldon}:${boldoff} ${reset}${invon}${gitUser}${reset}\n"
fi

if [ ! -d $GITAA_PATH_CLONE ] 
  then mkdir -- "$(realpath $GITAA_PATH_CLONE)" 2>/dev/null

  [ $? -ne 0 ] && errx_show 'mkdir' "$?" $GITAA_PATH_CLONE
fi

chmod $GITAA_MODE_DIRS $GITAA_PATH_CLONE |&> /dev/null

[ $? -ne 0 ] && errx_show 'chmod' "$?"

cd -- $GITAA_PATH_CLONE

declare -i noUser=0

if [ ! -d $gitUser ]
  then noUser=1 mkdir -- $gitUser 2>/dev/null

  [ $? -ne 0 ] && errx_exit 'mkdir' $? $gitUser

  chmod $GITAA_MODE_DIRS $gitUser |&> /dev/null

  [ $? -ne 0 ] && errx_show 'chmod' "$?"
fi

#if [ -d $gitUser ]
#  then declare -i dircnt=$(ls -a1 $gitUser | egrep -v '^[.]' | wc -l)
#
#  if [ ! $dircnt ] 
#fi

cd -- $gitUser

declare -xi waresDaWarez=0

while true
  do waresDaWarez=$(( 1 + waresDaWarez ))
  declare errorFile=$(mktemp /tmp/fileXXXXXX)
  declare outputStr=$( curl -vs "https://api.github.com/users/${gitUser}/repos?page=${waresDaWarez}&per_page=100" 2>$errorFile )

  if [ ! "$outputStr" ] 
    then 
    echo "${purplef}$0${reset}${whitef}${boldon}:${boldoff} ${yellowf}No output received from GitHub API!${reset}"
    echo -n "${purplef}$0${reset}${whitef}${boldon}:${boldoff} " 
    echo "${redf}$(cat $errorFile | tr '*' '#' | tr '\n' ' ' | sed 's![#]!..!g')${reset}"

    rm -f -- "$errorFile"

    exit 2
  fi

  if [ "`echo "$outputStr" | grep 'API rate limit '`" ]
    then echo "${purplef}$0${reset}${whitef}${boldon}:${boldoff} ${yellowf}GitHub API key's rate limit exceeded (try again later)${reset}"

    exit 3 
  fi

  export GITHUB_REPO_URLS=$(echo "$outputStr" | grep '"html_url": "' | grep -- "/${gitUser}/" | cut -d \" -f4 | sed 's!^git://!https://!g' | sed "s!https://github.com/${gitUser}/!!g" | sed 's![/]+!!g' | tr '\012' ' ' | sed 's![ ]*$!!')

  if [ ! "$GITHUB_REPO_URLS" ] 
    then echo "${purplef}$0${whitef}${boldon}:${boldoff} ${yellowf}Received output from GitHub API, but no repository references?${reset}"
    echo "${purplef}$0${whitef}${boldon}:${boldoff} ${yellowf}Are you sure the correct username was entered?${reset}"
    echo "${purplef}$0${whitef}${boldon}:${boldoff} ${yellowf}https://github.com/${gitUser}/repositories should be a non-empty list of repos!${reset}"

    exit 4
  else
    echo -e "${greenf}${ulon}${GITHUB_REPO_URLS}${reset}\n" | sed "s! !${reset} ${greenf}${ulon}!g"
  fi

  declare -i aflag=$false

  if [ ! $noUser ]
    then for d in $GITHUB_REPO_URLS
      do [ -d "$d" ] || aflag=$true
    done
  
    if [ $aflag -eq 0 ] 
      then echo "${purplef}$0${whitef}${boldon}:${boldoff} ${yellowf}All repositories already have local directories!${reset}"
      echo "${purplef}$0${whitef}${boldon}:${boldoff} ${yellowf}Are you sure ${italicon}clone${italicoff} was intended as opposed to ${italicon}pull${italicoff}?${reset}"
      echo "${purplef}$0${whitef}${boldon}:${boldoff} ${yellowf}If so, first remove local directories under path: $(pwd)${reset}"

      exit 5
    fi
  fi

  which parallel |&> /dev/null 

  if [ $? -eq 0 ]
    then echo -n "${whitef}${italicson}" 

    parallel -j${GITHOSE_NUM_JOBS} git clone "https://github.com/${gitUser}/{1}" ::: $GITHUB_REPO_URLS |&> /dev/null

    [ $successVal -eq 0 ] && [ $? -eq 0 ] && successVal=1
  else
    declare -i countChocula=0

    echo -n "${whitef}${italicson}"

    for one in $GITHUB_REPO_URLS
      do #
      
      if [ ! -d "`basename $one`" ] 
        then countChocula=$(( 1 + $countChocula ))

        echo $one
        
        git clone -- "https://github.com/${gitUser}/${one}" |&> /dev/null
      fi
    done

    for two in `seq 1 $countChocula`
      do wait %${two} 2> /dev/null

      [ $successVal -eq 0 ] && [ $? -eq 0 ] && successVal=1
    done
  fi

  break
done

if [ $successVal -ne 0 ]
  then echo -e "${reset}${purplef}$0${whitef}${boldon}:${boldoff} ${greenb}Finished Cloning All Repositories From${whitef}${boldon}:${boldoff}${reset} ${invon}${gitUser}${reset}\a"
else
  echo -e "${reset}${purplef}$0${whitef}${boldon}:${boldoff} ${orangeb}Could Not Clone Any Repositories From ${whitef}${boldon}:${boldoff}${reset} ${invon}${gitUser}${reset}"
  echo -e "${reset}${purplef}$0${whitef}${boldon}:${boldoff} ${orangeb}Perhaps All The Repositories Already Exist Locally? ${greenb}Considering Trying ${blueb}pull${reset}${greenb} Next Time..${reset}"
fi

sleep 1.6

exit 0
