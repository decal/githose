#!/usr/bin/env bash
#
# Anononymously and asynchronously perform a GIT clone operation on all of a 
# GitHub user's public warez repositories in a parallelized fashion!
#
# Derek Callaway <decal {AT} sdf {D0T} org>
#
# Wed Oct 12 07:12:00 EDT 2016

[[ $GITHOSE_DEBUG -ne 0 ]] && set -x || set +x

source -- etc/githose.conf
source -- inc/inits

### (o) DONUT ED IT ANYFING BLOW THIS (o) ###

source -- inc/colors
umask -- $GITAA_MODE_UMASK

declare -i singleRepo=0

if [ ! $1 ]
  then 
  echo "${yellowf}usage${whitef}${boldon}:${boldoff} ${purplef}$0${reset} ${cyanf}${italicson}USER${reset}"
  echo -e "  ${cyanf}USER  ${invon}case-sensitive string for GitHub user name${reset}\n"
  echo "${bluef}ex. ${purplef}$0${reset} ${bluef}decal${reset}"

  exit 1
fi

declare gitUser="$1"

( [[ $gitUser =~ .git$ ]] || [[ $gitUser =~ ^(http|git)[s]:[/]+ ]] ) && declare -i singleRepo=1

function errx_show() {
  echo -n "${yellowb}$1${whitef}${boldon}:${boldoff}${reset}${yellowb} " 

  perror -v -- $2

  echo "$reset"

  return 0
}

function errx_exit() {
  readonly reposPath=$(realpath $3)

  echo -n "${redb}$1${whitef}${boldon}:${boldoff}${reset}${redb} " 

  [ "$reposPath" ] && echo -n "$reposPath "

  perror -v -- $2

  echo -n "$reset"

  exit -- $2
}

if [ $singleRepo -ne 0 ]
  then cd -- $GITAA_PATH_REPOS

  echo "${purplef}$0${whitef}${boldon}:${boldoff} ${cyanf}Reference to Individual Git Repository Detected${whitef}${boldon}:${boldoff} ${reset}${invon}${gitUser}${reset}" 

  echo -n "${whitef}${italicson}"

  git clone $gitUser

  exit 0
else
  echo "${purplef}$0${whitef}${boldon}:${boldoff} ${bluef}Fetching All GitHub Repositories for Username${whitef}${boldon}:${boldoff} ${reset}${invon}${gitUser}${reset}"
  echo
fi

if [ ! -d $GITAA_PATH_CLONE ] 
  then mkdir -- "$(realpath $GITAA_PATH_CLONE)" 2>/dev/null

  [[ $? -ne 0 ]] && errx_show 'mkdir' $? $GITAA_PATH_CLONE
fi

chmod $GITAA_MODE_CDIRS $GITAA_PATH_CLONE 2>/dev/null

[[ $? -ne 0 ]] && errx_show 'chmod' $?

cd -- $GITAA_PATH_CLONE

declare -i noUser=0

if [ ! -d $gitUser ]
  then noUser=1 mkdir -- $gitUser 2>/dev/null

  [[ $? -ne 0 ]] && errx_exit 'mkdir' $? $gitUser

  chmod $GITAA_MODE_CDIRS $gitUser 2>/dev/null

  [[ $? -ne 0 ]] && errx_show 'chmod' $?
fi

#if [ -d $gitUser ]
#  then declare -i dircnt=$(ls -a1 $gitUser | egrep -v '^[.]' | wc -l)
#
#  if [ ! $dircnt ] 
#fi

cd -- $gitUser

declare -xi waresDaWarez=0

while true
  do waresDaWarez=$(( 1 + waresDaWarez ))
  declare outputStr=$( curl -s "https://api.github.com/users/${gitUser}/repos?page=${waresDaWarez}&per_page=100" 2>&1 )

  if [ ! "$outputStr" ] 
    then echo "${purplef}$0${reset}${whitef}${boldon}:${boldoff} ${yellowf}No output received from GitHub API!${reset}"

    exit 2
  fi

  if [ "`echo "$outputStr" | grep 'ate limit'`" ]
    then echo "${purplef}$0${reset}${whitef}${boldon}:${boldoff} ${yellowf}GitHub API key's rate limit exceeded (try again later)${reset}"

    exit 3 
  fi

  export GITHUB_REPO_URLS=$(echo "$outputStr" | grep '"html_url": "' | grep -- "/${gitUser}/" | cut -d \" -f4 | sed 's!^git://!https://!g' | sed "s!https://github.com/${gitUser}/!!g" | sed -r 's![/]+!!gi' | tr '\012' ' ' | sed -r 's![ ]*$!!')

  if [ ! "$GITHUB_REPO_URLS" ] 
    then echo "${purplef}$0${whitef}${boldon}:${boldoff} ${yellowf}Received output from GitHub API, but no repository references?${reset}"
    echo "${purplef}$0${whitef}${boldon}:${boldoff} ${yellowf}Are you sure the correct username was entered?${reset}"
    echo "${purplef}$0${whitef}${boldon}:${boldoff} ${yellowf}https://github.com/${gitUser}/repositories should be a non-empty list of repos!${reset}"

    exit 4
  else
    echo -e "${greenf}${ulon}${GITHUB_REPO_URLS}${reset}\n" | sed -r "s! !${reset} ${greenf}${ulon}!g"
  fi

  declare -i aflag=false

  if [ ! $noUser ]
    then for d in $GITHUB_REPO_URLS
      do [ -d "$d" ] || aflag=true
    done
  
    if [ ! $aflag ] 
      then echo "${purplef}$0${whitef}${boldon}:${boldoff} ${yellowf}All repositories already have local directories!${reset}"
      echo "${purplef}$0${whitef}${boldon}:${boldoff} ${yellowf}Are you sure clone was intended as opposed to pull?${reset}"
      echo "${purplef}$0${whitef}${boldon}:${boldoff} ${yellowf}If so, first remove local directories under path: $(pwd)${reset}"

      exit 5
    fi
  fi

  which parallel |&> /dev/null 

  if [ $? -eq 0 ]
    then echo -n "${whitef}${italicson}" 

    parallel -j${GITAA_JOBS_COUNT} git clone "https://github.com/${gitUser}/{1}" ::: $GITHUB_REPO_URLS
  else
    declare -i countChocula=0

    echo -n "${whitef}${italicson}"

    for one in $GITHUB_REPO_URLS
      do countChocula=$(( $countChocula + 1 ))

      git clone $one &
    done

    for two in `seq 1 $countChocula`
      do wait $two
    done
  fi

  break
done
