#!/usr/bin/env bash
#
# Anononymously and asynchronously perform a GIT clone operation on all of a 
# GitHub user's public warez repositories in a parallelized fashion!
#
# Derek Callaway <decal {AT} sdf {D0T} org>
#
# Wed Oct 12 07:12:00 EDT 2016
#

[ $GITHOSE_DEBUG ] && set -x || set +x

[ -d '../inc' ] && cd .. || ( [ -d '../../inc' ] && cd ../.. )

source etc/githose.conf
source inc/{inits,colors,funcs}

### (o) DONUT ED IT ANYFING BLOW THIS (o) ###

[ "$GITHOSE_MODE_UMASK" ] && umask -- $GITHOSE_MODE_UMASK

declare -i singleRepo=0 successVal=0 noUser=0 
declare -x gitUser="$1"

if [ ! "$gitUser" ]
  then 
  echo "${yellowf}usage${whitef}${boldon}:${boldoff} ${purplef}$0${reset} ${cyanf}${italicon}USER${reset}"
  echo -e "  ${cyanf}USER  ${invon}case-sensitive string for GitHub user name${reset}\n"
  echo "${bluef}ex. ${purplef}$0${reset} ${bluef}decal${reset}"

  exit 1
fi

declare gitUser="$1"

if [[ $gitUser =~ ^(http|git)[s]:[/]+ ]]
  then if ( [[ $gitUser =~ .git$ ]] || [[ $gitUser =~ ^(http|git)[s]:[/]+[^/]+/[^/]+/[^/]+ ]] ) 
    then singleRepo=1
  else
    gitUser=$(echo $gitUser | awk 'BEGIN { FS="/" } { print $4 }')
  fi
fi

function errx_show() {
  which perror 2>/dev/null

  if [ $? -ne 0 ]
    then echo -n "${yellowb}$1${whitef}${boldon}:${boldoff}${reset}${yellowb} " 

    perror -s -- $2

    echo "$reset"
  fi

  return 0
}

function errx_exit() {
  which perror  2 >/dev/null

  if [ $? -ne 0 ]
    then readonly reposPath=`realpath $3`

    echo -n "${redb}$1${whitef}${boldon}:${boldoff}${reset}${redb} " 

    [ "$reposPath" ] && echo -n "$reposPath "

    perror -v -- $2

    echo -n "${reset} "
  fi

  exit -- $2
}

if [ $singleRepo -ne 0 ]
  then cd -- "$GITAA_PATH_REPOS" > /dev/null

  echo -ne "${purplef}$0${whitef}${boldon}:${boldoff} ${cyanf}Handling URI Style Input as Single Git Repository${whitef}${boldon}:${boldoff} ${reset}${invon}${gitUser}${reset}\n${whitef}${italicon}" 

  git clone -- "$gitUser" > /dev/null 2>&1

  if [ $? ]
    then declare -i -r errCode=$? 
    
    echo -e "${reset}\a\n"

    exit -- $errCode
  else
    echo -e "${reset}\a\n${purplef}$0${whitef}${boldon}:${boldoff} ${greenb}Done Cloning Given Git Repository${whitef}${boldon}:${boldoff}${reset} ${invon}${gitUser}${reset}"

    exit 0
  fi
else
  echo -e "${reset}\n${purplef}$0${whitef}${boldon}:${boldoff} ${blueb}Fetching All GitHub Repositories for${whitef}${boldon}:${reset} ${invon}${gitUser}${reset}\n"
fi

if [ ! -d $GITAA_PATH_CLONE ] 
  then mkdir -- `realpath "$GITAA_PATH_CLONE"` 2>/dev/null

  [ $? -ne 0 ] && errx_show 'mkdir' "$?" "$GITAA_PATH_CLONE"
fi

chmod $GITAA_MODE_DIRS "$GITAA_PATH_CLONE" |&> /dev/null

[ $? -ne 0 ] && errx_show 'chmod' "$?"

cd -- "$GITAA_PATH_CLONE" > /dev/null

if [ ! -d $gitUser ]
  then noUser=1 
  
  mkdir -- "$gitUser" 2> /dev/null

  [ $? -ne 0 ] && errx_exit 'mkdir' $? "$gitUser"

  chmod $GITAA_MODE_DIRS $gitUser |&> /dev/null

  [ $? -ne 0 ] && errx_show 'chmod' $?
fi

cd -- "$gitUser" > /dev/null

errorFile=$(mktemp /tmp/fileXXXXXX)
outputStr=$( curl -vs "https://api.github.com/users/${gitUser}/repos?page=1&per_page=100" 2> "$errorFile" )

if [ ! "$outputStr" ] 
  then echo "${purplef}$0${reset}${whitef}${boldon}:${boldoff} ${yellowf}No output received from GitHub API!${reset}"
  echo -n "${purplef}$0${reset}${whitef}${boldon}:${boldoff} " 
  echo "${redf}$(cat $errorFile | tr '*' '#' | tr '\n' ' ' | sed 's![#]!..!g')${reset}"

  rm -f -- "$errorFile" 2> /dev/null

  exit 2
fi

if [ "`echo "$outputStr" | grep 'API rate limit '`" ]
  then echo "${purplef}$0${reset}${whitef}${boldon}:${boldoff} ${yellowf}GitHub API key's rate limit exceeded (try again later)${reset}"

  exit 3 
fi

export GITHUB_REPO_URLS=$(echo "$outputStr" | grep '"html_url": "' | grep -- "/${gitUser}/" | cut -d \" -f4 | sed 's!^git://!https://!g' | sed "s!https://github.com/${gitUser}/!!g" | sed 's![/]+!!g' | tr '\012' ' ' | sed 's![ ]*$!!')

declare lastLink=$(egrep '^[<] Link: ' $errorFile | cut -d ' ' -f2-  | awk -F\< '{print$NF;}' | awk -F\> '{print$1}')
declare -i lastNum=$(echo "$lastLink" | cut -d\= -f2 | cut -d\& -f1)

[ $lastNum -eq 0 ] && lastNum=1

for i in `seq 1 $lastNum`
  do anerrorFile=$(mktemp /tmp/fileXXXXXX)
  anoutputStr=$(curl -vs "https://api.github.com/users/${gitUser}/repos?page=${i}&per_page=100" 2> "$anerrorFile")
  moreRepoUrls=$(echo "$anoutputStr" | grep '"html_url": "' | grep -- "/${gitUser}/" | cut -d \" -f4 | sed 's!^git://!https://!g' | sed "s!https://github.com/${gitUser}/!!g" | sed 's![/]+!!g' | tr '\012' ' ' | sed 's![ ]*$!!')
  GITHUB_REPO_URLS+=" $moreRepoUrls"
done

## TODO: Parse all repos API output pages from first to last
# Link: <https://api.github.com/user/773264/repos?page=2>; rel="next", <https://api.github.com/user/773264/repos?page=2>; rel="last"
# egrep '^[<] Link: ' /tmp/githose-decal.out | cut -d ' ' -f2-  | awk -F\< '{print$NF;}' | awk -F\> '{print$1}'
# https://api.github.com/user/773264/repos?page=2

if [ ! "$GITHUB_REPO_URLS" ] 
  then echo "${purplef}$0${whitef}${boldon}:${boldoff} ${yellowf}Received output from GitHub API, but no repository references?${reset}"
  echo "${purplef}$0${whitef}${boldon}:${boldoff} ${yellowf}Are you sure the correct username was entered?${reset}"
  echo "${purplef}$0${whitef}${boldon}:${boldoff} ${yellowf}https://github.com/${gitUser}/repositories should be a non-empty list of repos!${reset}"

  exit 4
else
  echo -e "${greenf}${ulon}${GITHUB_REPO_URLS}${reset}" | sed "s! !${reset} ${greenf}${ulon}!g"
fi

declare -i aflag=0

if [ $noUser -eq 0 ]
  then for d in $GITHUB_REPO_URLS
    do if [ ! -d "$d" ] 
      then aflag=1

      break
    fi
  done
  
  if [ $aflag -eq 0 ] 
    then echo "${reset}"
    echo "${purplef}$0${whitef}${boldon}:${boldoff} ${yellowf}All repositories already have local directories!${reset}"
    echo "${purplef}$0${whitef}${boldon}:${boldoff} ${yellowf}Are you sure ${italicon}clone${italicoff} was intended as opposed to ${italicon}pull${italicoff}?${reset}"
    echo "${purplef}$0${whitef}${boldon}:${boldoff} ${yellowf}If so, first remove local directories under path: $(pwd)${reset}"

    exit 5
  fi
fi

declare -i countChocula=0

echo -n "${whitef}${italicon}"

for one in $GITHUB_REPO_URLS
  do if [ ! -d $(basename "$one") ] 
    then countChocula+=1

    git clone -- "https://github.com/${gitUser}/${one}" 2> /dev/null &

    [ "$GITHOSE_WIKI" ] && git clone -- "https://github.com/${gitUser}/${one}.wiki" 2> /dev/null &
  fi
done

[ "$GITHOSE_WIKI" ] && countChocula+=$countChocula

for two in $(seq 1 $countChocula)
  do wait -- "%${two}" 2> /dev/null

  [ $successVal -eq 0 -a $? -eq 0 ] && successVal=1
done

if [ $successVal -ne 0 ]
  then echo -e "${reset}${purplef}$0${whitef}${boldon}:${boldoff} ${greenb}Finished Cloning All Repositories From${whitef}${boldon}:${boldoff}${reset} ${invon}${gitUser}${reset}\a"
else
  echo -e "${reset}${purplef}$0${whitef}${boldon}:${boldoff} ${yellowb}Could Not Clone Any Repositories From ${whitef}${boldon}:${boldoff}${reset} ${invon}${gitUser}${reset}"
  echo -e "${reset}${purplef}$0${whitef}${boldon}:${boldoff} ${yellowb}Perhaps All The Repositories Already Exist Locally? ${greenb}Considering Trying ${blueb}pull${reset}${greenb} Next Time..${reset}"
fi

